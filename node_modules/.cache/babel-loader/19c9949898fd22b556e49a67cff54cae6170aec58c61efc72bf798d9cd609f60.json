{"ast":null,"code":"import axios from \"axios\";\nimport $router from \"@/router\";\n\n// instanca axios-a\nlet Service = axios.create({\n  baseURL: \"http://localhost:3000\",\n  timeout: 1000\n});\nlet Auth = {\n  async login(username, password) {\n    let response = await Service.post(\"/auth\", {\n      username: username,\n      password: password\n    });\n\n    // data je axiosov atribut, uzmme podatke\n    let user = response.data;\n\n    // to spremi u localStorage stranice (ključ, vrijednost), pretvori u string\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    return true;\n  },\n  async signup(new_username, new_password) {\n    try {\n      let response = await Service.post(\"/user\", {\n        username: new_username,\n        password: new_password\n      });\n\n      // data je axiosov atribut, uzmme podatke\n      let user = response.data;\n\n      // to spremi u localStorage stranice (ključ, vrijednost), pretvori u string\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      return true;\n    } catch (err) {\n      console.error(\"Greška prilikom registracije:\", err);\n      // Obradite grešku (npr. prikažite poruku o grešci korisniku)\n      return false;\n    }\n  },\n  logout() {\n    localStorage.removeItem(\"user\");\n  },\n  getUser() {\n    // uzimam korisnika iz localstorage (vratim u objekt)\n    return JSON.parse(localStorage.getItem(\"user\"));\n  },\n  getToken() {\n    // uzmemo token koji je u localStorage-u\n    let user = Auth.getUser();\n    if (user && user.token) {\n      return user.token;\n    } else {\n      return false;\n    }\n  },\n  authenticated() {\n    let user = Auth.getUser();\n    if (user && user.token) {\n      return true;\n    }\n    return false;\n  },\n  state: {\n    get authenticated() {\n      return Auth.authenticated();\n    }\n  },\n  async deleteUser(username) {\n    try {\n      // Pozivamo backend funkciju deleteUser s proslijeđenim korisničkim imenom\n      const response = await axios.delete(`/user/${username}`);\n      return response.data.success; // Ovdje pretpostavljamo da će backend vratiti objekt s atributom 'success' koji će biti true ako je brisanje uspješno, a false ako nije\n    } catch (error) {\n      console.error(\"Greška prilikom brisanja korisnika:\", error);\n      return false; // Ako dođe do greške, vraćamo false\n    }\n  }\n};\n\n// Axios interseptori, dodaj token u header\nService.interceptors.request.use(request => {\n  try {\n    let token = Auth.getToken();\n    request.headers[\"Authorization\"] = \"Bearer \" + token;\n  } catch (e) {\n    console.log(e);\n  }\n  return request;\n});\nService.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response.status == 401 || error.response.status == 403) {\n    Auth.logout();\n    $router.go();\n  }\n  return Promise.reject(error);\n});\nexport { Service, Auth };","map":{"version":3,"names":["axios","$router","Service","create","baseURL","timeout","Auth","login","username","password","response","post","user","data","localStorage","setItem","JSON","stringify","signup","new_username","new_password","err","console","error","logout","removeItem","getUser","parse","getItem","getToken","token","authenticated","state","deleteUser","delete","success","interceptors","request","use","headers","e","log","status","go","Promise","reject"],"sources":["C:/Users/imutina/Projects/wannaplay/src/services/index.js"],"sourcesContent":["import axios from \"axios\";\r\nimport $router from \"@/router\";\r\n\r\n// instanca axios-a\r\nlet Service = axios.create({\r\n  baseURL: \"http://localhost:3000\",\r\n  timeout: 1000,\r\n});\r\n\r\nlet Auth = {\r\n  async login(username, password) {\r\n    let response = await Service.post(\"/auth\", {\r\n      username: username,\r\n      password: password,\r\n    });\r\n\r\n    // data je axiosov atribut, uzmme podatke\r\n    let user = response.data;\r\n\r\n    // to spremi u localStorage stranice (ključ, vrijednost), pretvori u string\r\n    localStorage.setItem(\"user\", JSON.stringify(user));\r\n    return true;\r\n  },\r\n  async signup(new_username, new_password) {\r\n    try {\r\n      let response = await Service.post(\"/user\", {\r\n        username: new_username,\r\n        password: new_password,\r\n      });\r\n\r\n      // data je axiosov atribut, uzmme podatke\r\n      let user = response.data;\r\n\r\n      // to spremi u localStorage stranice (ključ, vrijednost), pretvori u string\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Greška prilikom registracije:\", err);\r\n      // Obradite grešku (npr. prikažite poruku o grešci korisniku)\r\n      return false;\r\n    }\r\n  },\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  },\r\n  getUser() {\r\n    // uzimam korisnika iz localstorage (vratim u objekt)\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n  },\r\n  getToken() {\r\n    // uzmemo token koji je u localStorage-u\r\n    let user = Auth.getUser();\r\n    if (user && user.token) {\r\n      return user.token;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  authenticated() {\r\n    let user = Auth.getUser();\r\n    if (user && user.token) {\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  state: {\r\n    get authenticated() {\r\n      return Auth.authenticated();\r\n    },\r\n  },\r\n  async deleteUser(username) {\r\n    try {\r\n      // Pozivamo backend funkciju deleteUser s proslijeđenim korisničkim imenom\r\n      const response = await axios.delete(`/user/${username}`);\r\n      return response.data.success; // Ovdje pretpostavljamo da će backend vratiti objekt s atributom 'success' koji će biti true ako je brisanje uspješno, a false ako nije\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom brisanja korisnika:\", error);\r\n      return false; // Ako dođe do greške, vraćamo false\r\n    }\r\n  },\r\n};\r\n\r\n// Axios interseptori, dodaj token u header\r\nService.interceptors.request.use((request) => {\r\n  try {\r\n    let token = Auth.getToken();\r\n    request.headers[\"Authorization\"] = \"Bearer \" + token;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return request;\r\n});\r\n\r\nService.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response.status == 401 || error.response.status == 403) {\r\n      Auth.logout();\r\n      $router.go();\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport { Service, Auth };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}